target Python {
  threading: true,
  keepalive: true,
  compile-definitions: {
    EXECUTABLE_PREAMBLE: "",
    NUMBER_OF_FEDERATES: "5",
    FEDERATED: "",
    FEDERATED_CENTRALIZED: ""
  },
  coordination: "centralized",
  _fed_setup: "include/_federate__client__3_preamble.h"
}


NONE preamble {=
import time
import numpy as np
=}
preamble {=
import gc
import atexit
gc.disable()
atexit.register(os._exit, 0)

=}

reactor clientReactor {
  input global_parameters
  output updated_parameters

  reaction(
      startup) {=
  
  =}

  reaction(global_parameters) ->
  updated_parameters {=
    val = global_parameters.value
    time.sleep(0.5)
    new_parameter = val.copy()
    updated_parameters.set(new_parameter)
  =}
}
reactor _clientglobal_parameters {
  input port0

  output[1] port

  port0 -> port
}
@_networkReactor("sender")
reactor NetworkSender_0<SENDERINDEXPARAMETER> {
  input[1] msg

  @_c_body
  reaction(startup) {=
    extern reaction_t* port_absent_reaction[];
    void enqueue_port_absent_reactions(environment_t*);
    LF_PRINT_DEBUG("Adding network port absent reaction to table.");
    port_absent_reaction[SENDERINDEXPARAMETER] = &self->_lf__reaction_2;
    LF_PRINT_DEBUG("Added network output control reaction to table. Enqueueing it...");
    enqueue_port_absent_reactions(self->base.environment);
  =}

  @_c_body
  reaction(msg) {=
    // Acquire the GIL (Global Interpreter Lock) to be able to call Python APIs.
    PyGILState_STATE gstate;
    gstate = PyGILState_Ensure();
    // Sending from msg[0] in federate federate__client__3 to server.updated_parameters in federate federate__server
    if (!msg[0]->is_present) {
    PyGILState_Release(gstate);
    return;
    }
    if (global_pickler == NULL) lf_print_error_and_exit("The pickle module is not loaded.");
    PyObject* serialized_pyobject = PyObject_CallMethod(global_pickler, "dumps", "O", msg[0]->value);
    if (serialized_pyobject == NULL) {
        if (PyErr_Occurred()) PyErr_Print();
        lf_print_error_and_exit("Could not serialize serialized_pyobject.");
    }
    Py_buffer serialized_message;
    int returnValue = PyBytes_AsStringAndSize(serialized_pyobject, &serialized_message.buf, &serialized_message.len);
    if (returnValue == -1) {
        if (PyErr_Occurred()) PyErr_Print();
        lf_print_error_and_exit("Could not serialize serialized_message.");
    }
    size_t _lf_message_length = serialized_message.len;
    send_timed_message(self->base.environment, NEVER, MSG_TYPE_TAGGED_MESSAGE, 3, 4, "federate 4 via the RTI", _lf_message_length, serialized_message.buf);
    Py_XDECREF(serialized_pyobject);
    /* Release the thread. No Python API allowed beyond this point. */
    PyGILState_Release(gstate);
  =}

  @_c_body
  reaction() msg {=
    // If the output port has not been lf_set for the current logical time,
    // send an ABSENT message to the receiving federate
    LF_PRINT_LOG("Executing port absent reaction for port %d to federate %d at time %lld.",
              3, 4, (long long) lf_time_logical_elapsed());
    if (msg[0] == NULL || !msg[0]->is_present) {
    LF_PRINT_LOG("The output port is NULL or it is not present.");
        send_port_absent_to_federate(self->base.environment, NEVER, 3, 4);
    }
  =}
}
@_networkReactor("receiver")
reactor NetworkReceiver_7 {
  output msg

  logical action networkMessage

  @_c_body
  reaction(startup) {=
    self->_lf__reaction_1.is_an_input_reaction = true;
  =}

  @_c_body
  reaction(networkMessage) -> msg {=
    // Acquire the GIL (Global Interpreter Lock) to be able to call Python APIs.
    PyGILState_STATE gstate;
    gstate = PyGILState_Ensure();
    msg->physical_time_of_arrival = self->_lf__networkMessage.physical_time_of_arrival;
    PyObject* message_byte_array = PyBytes_FromStringAndSize((char*)networkMessage->token->value, networkMessage->token->length);
    PyObject* deserialized_message = PyObject_CallMethod(global_pickler, "loads", "O", message_byte_array);
    if (deserialized_message == NULL) {
        if (PyErr_Occurred()) PyErr_Print();
        lf_print_error_and_exit("Could not deserialize deserialized_message.");
    }
    Py_XDECREF(message_byte_array);
    lf_token_t* token = lf_new_token((void*)msg, deserialized_message, 1);
    lf_set_destructor(msg, python_count_decrement);
    lf_set_token(msg, token);
    /* Release the thread. No Python API allowed beyond this point. */
    PyGILState_Release(gstate);
  =}
}
@_fed_config()
main reactor  {

    client = new clientReactor(bank_index=3)
    
    
    
    
    
    @_tpoLevel(3)
    ns_federate__server_2 = new NetworkSender_0<{= 0 =}>()
    nr_federate__client__3 = new NetworkReceiver_7()
    _clientglobal_parameters3 = new _clientglobal_parameters()
    _clientglobal_parameters3.port -> client.global_parameters
    client.updated_parameters -> ns_federate__server_2.msg
    nr_federate__client__3.msg -> _clientglobal_parameters3.port0
}
