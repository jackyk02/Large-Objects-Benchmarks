target Python {
  coordination: centralized
}

preamble {=
  import time
  import numpy as np
=}

reactor clientReactor {
  input global_parameters
  output updated_parameters

  reaction(startup) {=  =}

  reaction(global_parameters) -> updated_parameters {=
    val = global_parameters.value
    time.sleep(0.5)
    new_parameter = val.copy()
    updated_parameters.set(new_parameter)
  =}
}

reactor serverReactor {
  output global_parameters
  input[4] updated_parameters
  state round_num
  state start_time
  state prev_time

  reaction(startup) -> global_parameters {=
    self.round_num = 0
    self.results = [0] * 4
    self.start_time = None
    self.prev_time = None
    val = np.ones(1310720)
    global_parameters.set(val)
  =}

  reaction(updated_parameters) -> global_parameters {=
    # Retrieve value from each client
    for i in range(4):
        self.results[i] = updated_parameters[i].value

    # Check and set the benchmark start time for the first round
    if self.round_num == 0:
        self.start_time = time.time()
        self.prev_time = self.start_time

    # print round number
    print("Episode: "+str(self.round_num))
    self.round_num += 1

    # print Time Taken
    cur_time = time.time()
    print(f"Time taken: {cur_time - self.start_time:.2f} seconds")
    print(f"Overhead: {cur_time - self.prev_time - 0.5:.2f} seconds\n")
    self.prev_time = cur_time

    # Update the global parameters with the results from the first client for the next round
    global_parameters.set(self.results[0].copy())
  =}
}

federated reactor {
  client = new[4] clientReactor()
  server = new serverReactor()
  (server.global_parameters)+ -> client.global_parameters after 0
  client.updated_parameters -> server.updated_parameters
}
